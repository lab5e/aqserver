//
// Protocol buffer definitions for 4 gen TKAQ units.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: aq/v1/aq.proto

package aqv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Sample -- represents one packet of data from the air quality unit.
// When extending this keep in mind that dealing with protobuffers on
// constrained platforms dealing with nested structures can be a bit
// of a pain, so we try to keep this message as simple as possible.
//
type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ---------- Board fields ----------
	Sysid            uint64  `protobuf:"varint,1,opt,name=sysid,proto3" json:"sysid,omitempty"`                                                  // Hardware id
	FirmwareVersion  uint64  `protobuf:"varint,2,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`       // Versioning info
	Uptime           int64   `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`                                                // Uptime of the system - number of milliseconds since reboot.
	BoardTemp        float32 `protobuf:"fixed32,4,opt,name=board_temp,json=boardTemp,proto3" json:"board_temp,omitempty"`                        // Board temperature in celsius
	BoardRelHumidity float32 `protobuf:"fixed32,5,opt,name=board_rel_humidity,json=boardRelHumidity,proto3" json:"board_rel_humidity,omitempty"` // Board relative humidity in percent
	Status           uint64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                                // Generic status bit field (for future use)
	// ---------- GPS fields ----------
	// If the GPS cannot get a fix these fields will all be zeroed.
	GpsTimestamp float32 `protobuf:"fixed32,7,opt,name=gps_timestamp,json=gpsTimestamp,proto3" json:"gps_timestamp,omitempty"` // Timestamp from the GPS
	Lat          float32 `protobuf:"fixed32,8,opt,name=lat,proto3" json:"lat,omitempty"`                                       // Latitude in radians
	Lon          float32 `protobuf:"fixed32,9,opt,name=lon,proto3" json:"lon,omitempty"`                                       // Longitude in radians
	Alt          float32 `protobuf:"fixed32,10,opt,name=alt,proto3" json:"alt,omitempty"`                                      // Altitude in meters
	// ---------- AFE3 fields ----------
	// In order to obtain the measurement in mV the sensor readinggs
	// below have to be multiplied by 0.000000596046.  On the
	// calibration datasheet for each sensor there will be an offset
	// value for each sensor (given in mV).
	//
	Sensor_1Work      uint32 `protobuf:"varint,20,opt,name=sensor_1_work,json=sensor1Work,proto3" json:"sensor_1_work,omitempty"`                     // OP1 ADC reading - NO2 working electrode
	Sensor_1Aux       uint32 `protobuf:"varint,21,opt,name=sensor_1_aux,json=sensor1Aux,proto3" json:"sensor_1_aux,omitempty"`                        // OP2 ADC reading - NO2 auxillary electrode
	Sensor_2Work      uint32 `protobuf:"varint,22,opt,name=sensor_2_work,json=sensor2Work,proto3" json:"sensor_2_work,omitempty"`                     // OP3 ADC reading - O3+NO2 working electrode
	Sensor_2Aux       uint32 `protobuf:"varint,23,opt,name=sensor_2_aux,json=sensor2Aux,proto3" json:"sensor_2_aux,omitempty"`                        // OP4 ADC reading - O3+NO2 auxillary electrode
	Sensor_3Work      uint32 `protobuf:"varint,24,opt,name=sensor_3_work,json=sensor3Work,proto3" json:"sensor_3_work,omitempty"`                     // OP5 ADC reading - NO working electrode
	Sensor_3Aux       uint32 `protobuf:"varint,25,opt,name=sensor_3_aux,json=sensor3Aux,proto3" json:"sensor_3_aux,omitempty"`                        // OP6 ADC reading - NO aux electrode
	Afe3TempRaw       uint32 `protobuf:"varint,26,opt,name=afe3_temp_raw,json=afe3TempRaw,proto3" json:"afe3_temp_raw,omitempty"`                     // Pt1000 ADC reading - AFE-3 ambient temperature
	OpcPmA            uint32 `protobuf:"varint,30,opt,name=opc_pm_a,json=opcPmA,proto3" json:"opc_pm_a,omitempty"`                                    // OPC PM A (default PM1)
	OpcPmB            uint32 `protobuf:"varint,31,opt,name=opc_pm_b,json=opcPmB,proto3" json:"opc_pm_b,omitempty"`                                    // OPC PM B (default PM2.5)
	OpcPmC            uint32 `protobuf:"varint,32,opt,name=opc_pm_c,json=opcPmC,proto3" json:"opc_pm_c,omitempty"`                                    // OPC PM C (default PM10)
	OpcSamplePeriod   uint32 `protobuf:"varint,33,opt,name=opc_sample_period,json=opcSamplePeriod,proto3" json:"opc_sample_period,omitempty"`         // OPC sample period, in ms
	OpcSampleFlowRate uint32 `protobuf:"varint,34,opt,name=opc_sample_flow_rate,json=opcSampleFlowRate,proto3" json:"opc_sample_flow_rate,omitempty"` // OPC sample flow rate, in <UNIT???>
	OpcTemp           uint32 `protobuf:"varint,35,opt,name=opc_temp,json=opcTemp,proto3" json:"opc_temp,omitempty"`                                   // OPC temperature, in <UNIT???>
	OpcHum            uint32 `protobuf:"varint,36,opt,name=opc_hum,json=opcHum,proto3" json:"opc_hum,omitempty"`                                      // OPC temperature, in <UNIT???>
	OpcFanRevcount    uint32 `protobuf:"varint,37,opt,name=opc_fan_revcount,json=opcFanRevcount,proto3" json:"opc_fan_revcount,omitempty"`            // OPC fan rev count
	OpcLaserStatus    uint32 `protobuf:"varint,38,opt,name=opc_laser_status,json=opcLaserStatus,proto3" json:"opc_laser_status,omitempty"`            // OPC laser status, <DOC???>
	OpcSampleValid    uint32 `protobuf:"varint,39,opt,name=opc_sample_valid,json=opcSampleValid,proto3" json:"opc_sample_valid,omitempty"`            // OPC Sample valid
	// OPC PM bin 0 to 23
	OpcBin_0  uint32  `protobuf:"varint,40,opt,name=opc_bin_0,json=opcBin0,proto3" json:"opc_bin_0,omitempty"`    // OPC PM bin 0
	OpcBin_1  uint32  `protobuf:"varint,41,opt,name=opc_bin_1,json=opcBin1,proto3" json:"opc_bin_1,omitempty"`    // OPC PM bin 1
	OpcBin_2  uint32  `protobuf:"varint,42,opt,name=opc_bin_2,json=opcBin2,proto3" json:"opc_bin_2,omitempty"`    // OPC PM bin 2
	OpcBin_3  uint32  `protobuf:"varint,43,opt,name=opc_bin_3,json=opcBin3,proto3" json:"opc_bin_3,omitempty"`    // OPC PM bin 3
	OpcBin_4  uint32  `protobuf:"varint,44,opt,name=opc_bin_4,json=opcBin4,proto3" json:"opc_bin_4,omitempty"`    // OPC PM bin 4
	OpcBin_5  uint32  `protobuf:"varint,45,opt,name=opc_bin_5,json=opcBin5,proto3" json:"opc_bin_5,omitempty"`    // OPC PM bin 5
	OpcBin_6  uint32  `protobuf:"varint,46,opt,name=opc_bin_6,json=opcBin6,proto3" json:"opc_bin_6,omitempty"`    // OPC PM bin 6
	OpcBin_7  uint32  `protobuf:"varint,47,opt,name=opc_bin_7,json=opcBin7,proto3" json:"opc_bin_7,omitempty"`    // OPC PM bin 7
	OpcBin_8  uint32  `protobuf:"varint,48,opt,name=opc_bin_8,json=opcBin8,proto3" json:"opc_bin_8,omitempty"`    // OPC PM bin 8
	OpcBin_9  uint32  `protobuf:"varint,49,opt,name=opc_bin_9,json=opcBin9,proto3" json:"opc_bin_9,omitempty"`    // OPC PM bin 9
	OpcBin_10 uint32  `protobuf:"varint,50,opt,name=opc_bin_10,json=opcBin10,proto3" json:"opc_bin_10,omitempty"` // OPC PM bin 10
	OpcBin_11 uint32  `protobuf:"varint,51,opt,name=opc_bin_11,json=opcBin11,proto3" json:"opc_bin_11,omitempty"` // OPC PM bin 11
	OpcBin_12 uint32  `protobuf:"varint,52,opt,name=opc_bin_12,json=opcBin12,proto3" json:"opc_bin_12,omitempty"` // OPC PM bin 12
	OpcBin_13 uint32  `protobuf:"varint,53,opt,name=opc_bin_13,json=opcBin13,proto3" json:"opc_bin_13,omitempty"` // OPC PM bin 13
	OpcBin_14 uint32  `protobuf:"varint,54,opt,name=opc_bin_14,json=opcBin14,proto3" json:"opc_bin_14,omitempty"` // OPC PM bin 14
	OpcBin_15 uint32  `protobuf:"varint,55,opt,name=opc_bin_15,json=opcBin15,proto3" json:"opc_bin_15,omitempty"` // OPC PM bin 15
	OpcBin_16 uint32  `protobuf:"varint,56,opt,name=opc_bin_16,json=opcBin16,proto3" json:"opc_bin_16,omitempty"` // OPC PM bin 16
	OpcBin_17 uint32  `protobuf:"varint,57,opt,name=opc_bin_17,json=opcBin17,proto3" json:"opc_bin_17,omitempty"` // OPC PM bin 17
	OpcBin_18 uint32  `protobuf:"varint,58,opt,name=opc_bin_18,json=opcBin18,proto3" json:"opc_bin_18,omitempty"` // OPC PM bin 18
	OpcBin_19 uint32  `protobuf:"varint,59,opt,name=opc_bin_19,json=opcBin19,proto3" json:"opc_bin_19,omitempty"` // OPC PM bin 19
	OpcBin_20 uint32  `protobuf:"varint,60,opt,name=opc_bin_20,json=opcBin20,proto3" json:"opc_bin_20,omitempty"` // OPC PM bin 20
	OpcBin_21 uint32  `protobuf:"varint,61,opt,name=opc_bin_21,json=opcBin21,proto3" json:"opc_bin_21,omitempty"` // OPC PM bin 21
	OpcBin_22 uint32  `protobuf:"varint,62,opt,name=opc_bin_22,json=opcBin22,proto3" json:"opc_bin_22,omitempty"` // OPC PM bin 22
	OpcBin_23 uint32  `protobuf:"varint,63,opt,name=opc_bin_23,json=opcBin23,proto3" json:"opc_bin_23,omitempty"` // OPC PM bin 23
	Pm1       float32 `protobuf:"fixed32,64,opt,name=pm1,proto3" json:"pm1,omitempty"`                            // OPC PM A (default PM1)
	Pm25      float32 `protobuf:"fixed32,65,opt,name=pm25,proto3" json:"pm25,omitempty"`                          // OPC PM B (default PM2.5)
	Pm10      float32 `protobuf:"fixed32,66,opt,name=pm10,proto3" json:"pm10,omitempty"`                          // OPC PM C (default PM10)
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aq_v1_aq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_aq_v1_aq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_aq_v1_aq_proto_rawDescGZIP(), []int{0}
}

func (x *Sample) GetSysid() uint64 {
	if x != nil {
		return x.Sysid
	}
	return 0
}

func (x *Sample) GetFirmwareVersion() uint64 {
	if x != nil {
		return x.FirmwareVersion
	}
	return 0
}

func (x *Sample) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Sample) GetBoardTemp() float32 {
	if x != nil {
		return x.BoardTemp
	}
	return 0
}

func (x *Sample) GetBoardRelHumidity() float32 {
	if x != nil {
		return x.BoardRelHumidity
	}
	return 0
}

func (x *Sample) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Sample) GetGpsTimestamp() float32 {
	if x != nil {
		return x.GpsTimestamp
	}
	return 0
}

func (x *Sample) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Sample) GetLon() float32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Sample) GetAlt() float32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *Sample) GetSensor_1Work() uint32 {
	if x != nil {
		return x.Sensor_1Work
	}
	return 0
}

func (x *Sample) GetSensor_1Aux() uint32 {
	if x != nil {
		return x.Sensor_1Aux
	}
	return 0
}

func (x *Sample) GetSensor_2Work() uint32 {
	if x != nil {
		return x.Sensor_2Work
	}
	return 0
}

func (x *Sample) GetSensor_2Aux() uint32 {
	if x != nil {
		return x.Sensor_2Aux
	}
	return 0
}

func (x *Sample) GetSensor_3Work() uint32 {
	if x != nil {
		return x.Sensor_3Work
	}
	return 0
}

func (x *Sample) GetSensor_3Aux() uint32 {
	if x != nil {
		return x.Sensor_3Aux
	}
	return 0
}

func (x *Sample) GetAfe3TempRaw() uint32 {
	if x != nil {
		return x.Afe3TempRaw
	}
	return 0
}

func (x *Sample) GetOpcPmA() uint32 {
	if x != nil {
		return x.OpcPmA
	}
	return 0
}

func (x *Sample) GetOpcPmB() uint32 {
	if x != nil {
		return x.OpcPmB
	}
	return 0
}

func (x *Sample) GetOpcPmC() uint32 {
	if x != nil {
		return x.OpcPmC
	}
	return 0
}

func (x *Sample) GetOpcSamplePeriod() uint32 {
	if x != nil {
		return x.OpcSamplePeriod
	}
	return 0
}

func (x *Sample) GetOpcSampleFlowRate() uint32 {
	if x != nil {
		return x.OpcSampleFlowRate
	}
	return 0
}

func (x *Sample) GetOpcTemp() uint32 {
	if x != nil {
		return x.OpcTemp
	}
	return 0
}

func (x *Sample) GetOpcHum() uint32 {
	if x != nil {
		return x.OpcHum
	}
	return 0
}

func (x *Sample) GetOpcFanRevcount() uint32 {
	if x != nil {
		return x.OpcFanRevcount
	}
	return 0
}

func (x *Sample) GetOpcLaserStatus() uint32 {
	if x != nil {
		return x.OpcLaserStatus
	}
	return 0
}

func (x *Sample) GetOpcSampleValid() uint32 {
	if x != nil {
		return x.OpcSampleValid
	}
	return 0
}

func (x *Sample) GetOpcBin_0() uint32 {
	if x != nil {
		return x.OpcBin_0
	}
	return 0
}

func (x *Sample) GetOpcBin_1() uint32 {
	if x != nil {
		return x.OpcBin_1
	}
	return 0
}

func (x *Sample) GetOpcBin_2() uint32 {
	if x != nil {
		return x.OpcBin_2
	}
	return 0
}

func (x *Sample) GetOpcBin_3() uint32 {
	if x != nil {
		return x.OpcBin_3
	}
	return 0
}

func (x *Sample) GetOpcBin_4() uint32 {
	if x != nil {
		return x.OpcBin_4
	}
	return 0
}

func (x *Sample) GetOpcBin_5() uint32 {
	if x != nil {
		return x.OpcBin_5
	}
	return 0
}

func (x *Sample) GetOpcBin_6() uint32 {
	if x != nil {
		return x.OpcBin_6
	}
	return 0
}

func (x *Sample) GetOpcBin_7() uint32 {
	if x != nil {
		return x.OpcBin_7
	}
	return 0
}

func (x *Sample) GetOpcBin_8() uint32 {
	if x != nil {
		return x.OpcBin_8
	}
	return 0
}

func (x *Sample) GetOpcBin_9() uint32 {
	if x != nil {
		return x.OpcBin_9
	}
	return 0
}

func (x *Sample) GetOpcBin_10() uint32 {
	if x != nil {
		return x.OpcBin_10
	}
	return 0
}

func (x *Sample) GetOpcBin_11() uint32 {
	if x != nil {
		return x.OpcBin_11
	}
	return 0
}

func (x *Sample) GetOpcBin_12() uint32 {
	if x != nil {
		return x.OpcBin_12
	}
	return 0
}

func (x *Sample) GetOpcBin_13() uint32 {
	if x != nil {
		return x.OpcBin_13
	}
	return 0
}

func (x *Sample) GetOpcBin_14() uint32 {
	if x != nil {
		return x.OpcBin_14
	}
	return 0
}

func (x *Sample) GetOpcBin_15() uint32 {
	if x != nil {
		return x.OpcBin_15
	}
	return 0
}

func (x *Sample) GetOpcBin_16() uint32 {
	if x != nil {
		return x.OpcBin_16
	}
	return 0
}

func (x *Sample) GetOpcBin_17() uint32 {
	if x != nil {
		return x.OpcBin_17
	}
	return 0
}

func (x *Sample) GetOpcBin_18() uint32 {
	if x != nil {
		return x.OpcBin_18
	}
	return 0
}

func (x *Sample) GetOpcBin_19() uint32 {
	if x != nil {
		return x.OpcBin_19
	}
	return 0
}

func (x *Sample) GetOpcBin_20() uint32 {
	if x != nil {
		return x.OpcBin_20
	}
	return 0
}

func (x *Sample) GetOpcBin_21() uint32 {
	if x != nil {
		return x.OpcBin_21
	}
	return 0
}

func (x *Sample) GetOpcBin_22() uint32 {
	if x != nil {
		return x.OpcBin_22
	}
	return 0
}

func (x *Sample) GetOpcBin_23() uint32 {
	if x != nil {
		return x.OpcBin_23
	}
	return 0
}

func (x *Sample) GetPm1() float32 {
	if x != nil {
		return x.Pm1
	}
	return 0
}

func (x *Sample) GetPm25() float32 {
	if x != nil {
		return x.Pm25
	}
	return 0
}

func (x *Sample) GetPm10() float32 {
	if x != nil {
		return x.Pm10
	}
	return 0
}

var File_aq_v1_aq_proto protoreflect.FileDescriptor

var file_aq_v1_aq_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x71, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x61, 0x71, 0x2e, 0x76, 0x31, 0x22, 0xea, 0x0c, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x79, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x79, 0x73, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6c,
	0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x67, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x31, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x31, 0x57, 0x6f, 0x72, 0x6b, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x31, 0x5f, 0x61, 0x75, 0x78, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x31, 0x41, 0x75,
	0x78, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x32, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x32, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x32, 0x5f, 0x61, 0x75, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x32, 0x41, 0x75, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x33, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x33, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x33, 0x5f, 0x61, 0x75, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x33, 0x41, 0x75, 0x78, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x66, 0x65, 0x33, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x66, 0x65, 0x33, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x61,
	0x77, 0x12, 0x18, 0x0a, 0x08, 0x6f, 0x70, 0x63, 0x5f, 0x70, 0x6d, 0x5f, 0x61, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x50, 0x6d, 0x41, 0x12, 0x18, 0x0a, 0x08, 0x6f,
	0x70, 0x63, 0x5f, 0x70, 0x6d, 0x5f, 0x62, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f,
	0x70, 0x63, 0x50, 0x6d, 0x42, 0x12, 0x18, 0x0a, 0x08, 0x6f, 0x70, 0x63, 0x5f, 0x70, 0x6d, 0x5f,
	0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x50, 0x6d, 0x43, 0x12,
	0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x63, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x70, 0x63, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6f,
	0x70, 0x63, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x70, 0x63, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6f, 0x70, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x63, 0x5f, 0x68,
	0x75, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x48, 0x75, 0x6d,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x63, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x70, 0x63, 0x46,
	0x61, 0x6e, 0x52, 0x65, 0x76, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70,
	0x63, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x70, 0x63, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x63, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6f, 0x70, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x09, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x30, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x30, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x70,
	0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x70, 0x63, 0x42, 0x69, 0x6e, 0x31, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x63, 0x42, 0x69,
	0x6e, 0x32, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x33, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x33, 0x12, 0x1a,
	0x0a, 0x09, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x34, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x70,
	0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x35, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x70, 0x63, 0x42, 0x69, 0x6e, 0x35, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x36, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x63, 0x42, 0x69,
	0x6e, 0x36, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x37, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x37, 0x12, 0x1a,
	0x0a, 0x09, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x38, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x38, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x70,
	0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x39, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x70, 0x63, 0x42, 0x69, 0x6e, 0x39, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x31, 0x30, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42,
	0x69, 0x6e, 0x31, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f,
	0x31, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e,
	0x31, 0x31, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x31, 0x32,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x31, 0x32,
	0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x31, 0x33, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x31, 0x33, 0x12, 0x1c,
	0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x31, 0x34, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x31, 0x34, 0x12, 0x1c, 0x0a, 0x0a,
	0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x31, 0x35, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x31, 0x35, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70,
	0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x31, 0x36, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x31, 0x36, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f,
	0x62, 0x69, 0x6e, 0x5f, 0x31, 0x37, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70,
	0x63, 0x42, 0x69, 0x6e, 0x31, 0x37, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69,
	0x6e, 0x5f, 0x31, 0x38, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42,
	0x69, 0x6e, 0x31, 0x38, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f,
	0x31, 0x39, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e,
	0x31, 0x39, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x32, 0x30,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x32, 0x30,
	0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x32, 0x31, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x32, 0x31, 0x12, 0x1c,
	0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x32, 0x32, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x32, 0x32, 0x12, 0x1c, 0x0a, 0x0a,
	0x6f, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x32, 0x33, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x70, 0x63, 0x42, 0x69, 0x6e, 0x32, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6d,
	0x31, 0x18, 0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x6d, 0x31, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6d, 0x32, 0x35, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6d, 0x32, 0x35,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6d, 0x31, 0x30, 0x18, 0x42, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x70, 0x6d, 0x31, 0x30, 0x42, 0x6b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x71, 0x2e, 0x76,
	0x31, 0x42, 0x07, 0x41, 0x71, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x1e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x62, 0x35, 0x65,
	0x2f, 0x61, 0x71, 0x2f, 0x61, 0x71, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x71, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x41, 0x71, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x05, 0x41,
	0x71, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x11, 0x41, 0x71, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x41, 0x71, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aq_v1_aq_proto_rawDescOnce sync.Once
	file_aq_v1_aq_proto_rawDescData = file_aq_v1_aq_proto_rawDesc
)

func file_aq_v1_aq_proto_rawDescGZIP() []byte {
	file_aq_v1_aq_proto_rawDescOnce.Do(func() {
		file_aq_v1_aq_proto_rawDescData = protoimpl.X.CompressGZIP(file_aq_v1_aq_proto_rawDescData)
	})
	return file_aq_v1_aq_proto_rawDescData
}

var file_aq_v1_aq_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_aq_v1_aq_proto_goTypes = []interface{}{
	(*Sample)(nil), // 0: aq.v1.Sample
}
var file_aq_v1_aq_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_aq_v1_aq_proto_init() }
func file_aq_v1_aq_proto_init() {
	if File_aq_v1_aq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aq_v1_aq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aq_v1_aq_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aq_v1_aq_proto_goTypes,
		DependencyIndexes: file_aq_v1_aq_proto_depIdxs,
		MessageInfos:      file_aq_v1_aq_proto_msgTypes,
	}.Build()
	File_aq_v1_aq_proto = out.File
	file_aq_v1_aq_proto_rawDesc = nil
	file_aq_v1_aq_proto_goTypes = nil
	file_aq_v1_aq_proto_depIdxs = nil
}
